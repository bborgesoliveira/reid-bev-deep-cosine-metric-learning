FROM nvidia/cuda:11.6.1-cudnn8-devel-ubuntu20.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

ARG UBUNTU_VERSION=20.04

ARG ARCH=
ARG CUDA=11.6
# ARCH and CUDA are specified again because the FROM directive resets ARGs
# (but their default value is retained if set previously)
ARG ARCH
ARG CUDA
ARG CUDNN=8.4.0.27-1
ARG CUDNN_MAJOR_VERSION=8
ARG LIB_DIR_PREFIX=x86_64
ARG LIBNVINFER=7.2.2-1
ARG LIBNVINFER_MAJOR_VERSION=7

# Install system dependencies
RUN apt-get update -y && apt-get install software-properties-common -y && \
    add-apt-repository -y multiverse && apt-get update -y && apt-get upgrade -y && \
    apt-get install -y\
        apt-utils \
        vim \
        man \
        build-essential \
        wget \
        sudo \
        python3.8 \
        python3-pip \
        htop \
        zlib1g-dev \
        swig unzip \
        libosmesa6-dev \
        libgl1-mesa-glx \
        libglfw3 \
        patchelf \
        git-all \
        python3.8-dev&& \
    rm -rf /var/lib/apt/lists/*

ENV PATH ./.local/bin:$PATH
ENV PATH ./.local/lib:$PATH
ENV PATH ./.local/lib/python3.8/site-packages/nvidia/bin:$PATH
ENV PATH ./.local/lib/python3.8/site-packages:$PATH
ENV LD_LIBRARY_PATH ./.local/lib/python3.8/site-packages/tensorrt_libs:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

ENV LANG C.UTF-8

RUN python3 -m pip --no-cache-dir install --upgrade \
    "pip<20.3" \
    setuptools

# Install any python packages you need
COPY requirements.txt requirements.txt

# Upgrade pip. Install distutils to avoid error during pip install upgrade in python3.7
RUN python3 -m pip install --upgrade pip

RUN python3 -m pip install -r requirements.txt

#RUN python3 -m pip install mmcv==2.2.0 -f https://download.openmmlab.com/mmcv/dist/cu117/torch1.13/index.html
#RUN python3 -m pip install mmcv-full==1.5.0
RUN python3 -m pip uninstall mmcv mmdet mmcv-full
#RUN python3 -m pip install mmcv-full==1.4.0
#RUN python3 -m pip install mmdet==2.20.0
#RUN python3 -m pip install mmdet
RUN python3 -m pip install nuscenes-devkit

# Install PyTorch and torchvision compatibles with CUDA 11.6: https://pytorch.org/get-started/previous-versions/
#RUN pip3 install torch torchvision torchaudio -f https://download.pytorch.org/whl/nvidia-cudnn-cu11/torch_stable.html
RUN python3 -m pip install torch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1

#Install mmcv e mmdet
#RUN pip install mmcv==1.4.0 mmcv-full==1.4.0 mmdet==2.20.0

ARG uid=2000
ARG user
RUN echo /$user $uid
RUN useradd -d /$user -u $uid $user --shell /bin/bash
USER $user

# Set the working directory
#WORKDIR /app

WORKDIR /$user/cosine_metric_learning
ENV PYTHONPATH /$user/cosine_metric_learning

# ENV PATH /$user/.local/bin:$PATH
# ENV PATH /$user/.local/lib:$PATH
ENV LC_ALL C.UTF-8

ENV HOME /$user/cosine_metric_learning
ENV DATA_FOLDER data

# ENV CUDA_PATH /usr/local/cuda-11.6
# ENV CUDA_INCLUDE_PATH /usr/local/cuda-11.6/include
# ENV CUDA_LIBRARY_PATH /usr/local/cuda-11.6/lib64
# ENV CUDA_HOME /usr/local/cuda-11.6
# ENV CPATH /usr/local/cuda-11.6/include
# ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
# ENV PATH /usr/local/cuda-11.6/bin$:$PATH
# RUN export PATH=/usr/lib/x86_64-linux-gnu${PATH:+:${PATH}}
# RUN export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# Set the entrypoint
#ENTRYPOINT [ "python3" ]